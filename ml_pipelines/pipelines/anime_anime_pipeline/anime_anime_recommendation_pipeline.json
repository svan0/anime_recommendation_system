{
  "pipelineSpec": {
    "components": {
      "comp-component": {
        "executorLabel": "exec-component",
        "inputDefinitions": {
          "artifacts": {
            "all_anime_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "test_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "val_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "anime_embedding_size": {
              "type": "INT"
            },
            "early_stop_num_epochs": {
              "type": "INT"
            },
            "learning_rate": {
              "type": "DOUBLE"
            },
            "max_num_epochs": {
              "type": "INT"
            },
            "optimizer": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_metric_path": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "output_model_path": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-component-2": {
        "executorLabel": "exec-component-2",
        "inputDefinitions": {
          "artifacts": {
            "input_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "model_path": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-component-3": {
        "executorLabel": "exec-component-3",
        "inputDefinitions": {
          "artifacts": {
            "all_anime_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "test_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "train_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "val_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "anime_embedding_size": {
              "type": "INT"
            },
            "early_stop_num_epochs": {
              "type": "INT"
            },
            "learning_rate": {
              "type": "DOUBLE"
            },
            "max_num_epochs": {
              "type": "INT"
            },
            "optimizer": {
              "type": "STRING"
            },
            "scoring_layer_size": {
              "type": "INT"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_metric_path": {
              "artifactType": {
                "schemaTitle": "system.Metrics",
                "schemaVersion": "0.0.1"
              }
            },
            "output_model_path": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-component-4": {
        "executorLabel": "exec-component-4",
        "inputDefinitions": {
          "artifacts": {
            "input_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            },
            "model_path": {
              "artifactType": {
                "schemaTitle": "system.Model",
                "schemaVersion": "0.0.1"
              }
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_data_path": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data": {
        "executorLabel": "exec-load-big-query-data",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-2": {
        "executorLabel": "exec-load-big-query-data-2",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-3": {
        "executorLabel": "exec-load-big-query-data-3",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-4": {
        "executorLabel": "exec-load-big-query-data-4",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-5": {
        "executorLabel": "exec-load-big-query-data-5",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-6": {
        "executorLabel": "exec-load-big-query-data-6",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-7": {
        "executorLabel": "exec-load-big-query-data-7",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-data-8": {
        "executorLabel": "exec-load-big-query-data-8",
        "inputDefinitions": {
          "parameters": {
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      },
      "comp-load-big-query-external-data": {
        "executorLabel": "exec-load-big-query-external-data",
        "inputDefinitions": {
          "artifacts": {
            "external_table_uri": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          },
          "parameters": {
            "external_table_id": {
              "type": "STRING"
            },
            "external_table_schema": {
              "type": "STRING"
            },
            "query": {
              "type": "STRING"
            }
          }
        },
        "outputDefinitions": {
          "artifacts": {
            "output_csv": {
              "artifactType": {
                "schemaTitle": "system.Dataset",
                "schemaVersion": "0.0.1"
              }
            }
          }
        }
      }
    },
    "deploymentSpec": {
      "executors": {
        "exec-component": {
          "container": {
            "command": [
              "python3",
              "ml_pipelines/components/anime_anime/train_retrieval/src/task.py",
              "--train-data-path",
              "{{$.inputs.artifacts['train_data_path'].path}}",
              "--val-data-path",
              "{{$.inputs.artifacts['val_data_path'].path}}",
              "--test-data-path",
              "{{$.inputs.artifacts['test_data_path'].path}}",
              "--all-anime-data-path",
              "{{$.inputs.artifacts['all_anime_data_path'].path}}",
              "--output-model-path",
              "{{$.outputs.artifacts['output_model_path'].path}}",
              "--output-metrics-path",
              "{{$.outputs.artifacts['output_metric_path'].path}}",
              "--anime-embedding-size",
              "{{$.inputs.parameters['anime_embedding_size']}}",
              "--learning-rate",
              "{{$.inputs.parameters['learning_rate']}}",
              "--optimizer",
              "{{$.inputs.parameters['optimizer']}}",
              "--max-num-epochs",
              "{{$.inputs.parameters['max_num_epochs']}}",
              "--early-stop-num-epochs",
              "{{$.inputs.parameters['early_stop_num_epochs']}}"
            ],
            "image": "gcr.io/anime-rec-dev/ml_image@sha256:2d0be844b8cfc7d6b7504b1c6ef22b9dc997c8042ce6baec577d1ec3ee52ddfc",
            "resources": {
              "cpuLimit": 4.0,
              "memoryLimit": 32.0
            }
          }
        },
        "exec-component-2": {
          "container": {
            "command": [
              "python3",
              "ml_pipelines/components/anime_anime/infer_retrieval/src/task.py",
              "--model-path",
              "{{$.inputs.artifacts['model_path'].path}}",
              "--input-data-path",
              "{{$.inputs.artifacts['input_data_path'].path}}",
              "--output-data-path",
              "{{$.outputs.artifacts['output_data_path'].path}}"
            ],
            "image": "gcr.io/anime-rec-dev/ml_image@sha256:2d0be844b8cfc7d6b7504b1c6ef22b9dc997c8042ce6baec577d1ec3ee52ddfc"
          }
        },
        "exec-component-3": {
          "container": {
            "command": [
              "python3",
              "ml_pipelines/components/anime_anime/train_ranking/src/task.py",
              "--train-data-path",
              "{{$.inputs.artifacts['train_data_path'].path}}",
              "--val-data-path",
              "{{$.inputs.artifacts['val_data_path'].path}}",
              "--test-data-path",
              "{{$.inputs.artifacts['test_data_path'].path}}",
              "--all-anime-data-path",
              "{{$.inputs.artifacts['all_anime_data_path'].path}}",
              "--output-model-path",
              "{{$.outputs.artifacts['output_model_path'].path}}",
              "--output-metrics-path",
              "{{$.outputs.artifacts['output_metric_path'].path}}",
              "--anime-embedding-size",
              "{{$.inputs.parameters['anime_embedding_size']}}",
              "--scoring-layer-size",
              "{{$.inputs.parameters['scoring_layer_size']}}",
              "--learning-rate",
              "{{$.inputs.parameters['learning_rate']}}",
              "--optimizer",
              "{{$.inputs.parameters['optimizer']}}",
              "--max-num-epochs",
              "{{$.inputs.parameters['max_num_epochs']}}",
              "--early-stop-num-epochs",
              "{{$.inputs.parameters['early_stop_num_epochs']}}"
            ],
            "image": "gcr.io/anime-rec-dev/ml_image@sha256:2d0be844b8cfc7d6b7504b1c6ef22b9dc997c8042ce6baec577d1ec3ee52ddfc",
            "resources": {
              "cpuLimit": 4.0,
              "memoryLimit": 32.0
            }
          }
        },
        "exec-component-4": {
          "container": {
            "command": [
              "python3",
              "ml_pipelines/components/anime_anime/infer_ranking/src/task.py",
              "--model-path",
              "{{$.inputs.artifacts['model_path'].path}}",
              "--input-data-path",
              "{{$.inputs.artifacts['input_data_path'].path}}",
              "--output-data-path",
              "{{$.outputs.artifacts['output_data_path'].path}}"
            ],
            "image": "gcr.io/anime-rec-dev/ml_image@sha256:2d0be844b8cfc7d6b7504b1c6ef22b9dc997c8042ce6baec577d1ec3ee52ddfc"
          }
        },
        "exec-load-big-query-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-2": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-3": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-4": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-5": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-6": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-7": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-data-8": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_data(query:str, output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n    dataset_ref = client.dataset(\"processed_area\")\n    job_config = bigquery.QueryJobConfig()\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        },
        "exec-load-big-query-external-data": {
          "container": {
            "args": [
              "--executor_input",
              "{{$}}",
              "--function_to_execute",
              "load_big_query_external_data"
            ],
            "command": [
              "sh",
              "-c",
              "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-bigquery==2.31.0' 'pyarrow==6.0.1' 'pandas==1.3.4' 'kfp==1.8.10' && \"$0\" \"$@\"\n",
              "sh",
              "-ec",
              "program_path=$(mktemp -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3 -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
              "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef load_big_query_external_data(external_table_uri:Input[Dataset],\n                                 external_table_schema:list,\n                                 external_table_id:str,\n                                 query:str, \n                                 output_csv:Output[Dataset]):\n    from google.cloud import bigquery\n    client = bigquery.Client(project=\"anime-rec-dev\")\n\n    external_config = bigquery.ExternalConfig(\"CSV\")\n    external_config.source_uris = [\n        external_table_uri.path.replace('/gcs/', 'gs://')\n    ]\n    external_config.schema = [bigquery.SchemaField(x[0], x[1]) for x in external_table_schema]\n    external_config.options.skip_leading_rows = 1\n\n    job_config = bigquery.QueryJobConfig(table_definitions={external_table_id: external_config})\n    query_job = client.query(query, location='us-central1', job_config=job_config)\n    data = query_job.to_dataframe()\n    data.to_csv(output_csv.path, index = False)\n\n"
            ],
            "image": "python:3.7"
          }
        }
      }
    },
    "pipelineInfo": {
      "name": "anime-anime-recommendation-pipeline"
    },
    "root": {
      "dag": {
        "outputs": {
          "artifacts": {
            "component-3-output_metric_path": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "output_metric_path",
                  "producerSubtask": "component-3"
                }
              ]
            },
            "component-output_metric_path": {
              "artifactSelectors": [
                {
                  "outputArtifactKey": "output_metric_path",
                  "producerSubtask": "component"
                }
              ]
            }
          }
        },
        "tasks": {
          "component": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-component"
            },
            "dependentTasks": [
              "load-big-query-data",
              "load-big-query-data-2",
              "load-big-query-data-3",
              "load-big-query-data-4"
            ],
            "inputs": {
              "artifacts": {
                "all_anime_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-4"
                  }
                },
                "test_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-3"
                  }
                },
                "train_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data"
                  }
                },
                "val_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-2"
                  }
                }
              },
              "parameters": {
                "anime_embedding_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "256"
                    }
                  }
                },
                "early_stop_num_epochs": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "5"
                    }
                  }
                },
                "learning_rate": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.05
                    }
                  }
                },
                "max_num_epochs": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "30"
                    }
                  }
                },
                "optimizer": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "adagrad"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train retrieval model"
            }
          },
          "component-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-component-2"
            },
            "dependentTasks": [
              "component",
              "load-big-query-data-5"
            ],
            "inputs": {
              "artifacts": {
                "input_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-5"
                  }
                },
                "model_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_model_path",
                    "producerTask": "component"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "inference retrieval model"
            }
          },
          "component-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-component-3"
            },
            "dependentTasks": [
              "load-big-query-data-4",
              "load-big-query-data-6",
              "load-big-query-data-7",
              "load-big-query-data-8"
            ],
            "inputs": {
              "artifacts": {
                "all_anime_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-4"
                  }
                },
                "test_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-8"
                  }
                },
                "train_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-6"
                  }
                },
                "val_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-data-7"
                  }
                }
              },
              "parameters": {
                "anime_embedding_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "256"
                    }
                  }
                },
                "early_stop_num_epochs": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "5"
                    }
                  }
                },
                "learning_rate": {
                  "runtimeValue": {
                    "constantValue": {
                      "doubleValue": 0.05
                    }
                  }
                },
                "max_num_epochs": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "30"
                    }
                  }
                },
                "optimizer": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "adam"
                    }
                  }
                },
                "scoring_layer_size": {
                  "runtimeValue": {
                    "constantValue": {
                      "intValue": "256"
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train ranking model"
            }
          },
          "component-4": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-component-4"
            },
            "dependentTasks": [
              "component-3",
              "load-big-query-external-data"
            ],
            "inputs": {
              "artifacts": {
                "input_data_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_csv",
                    "producerTask": "load-big-query-external-data"
                  }
                },
                "model_path": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_model_path",
                    "producerTask": "component-3"
                  }
                }
              }
            },
            "taskInfo": {
              "name": "inference ranking model"
            }
          },
          "load-big-query-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    anime_anime_ordered AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank,\n            ROW_NUMBER() OVER (PARTITION BY animeB ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeA_rank\n        FROM anime_anime\n    )\n    \n        SELECT animeA, animeB \n        FROM anime_anime_ordered \n        WHERE (animeA_rank <= 100 OR animeB_rank <= 100) \n        AND animeA < animeB \n        AND ABS(MOD(FARM_FINGERPRINT(CONCAT(animeA, animeB)), 10)) BETWEEN 0 AND 7\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train data : anime anime retrieval"
            }
          },
          "load-big-query-data-2": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-2"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    anime_anime_ordered AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank,\n            ROW_NUMBER() OVER (PARTITION BY animeB ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeA_rank\n        FROM anime_anime\n    )\n    \n        SELECT animeA, animeB \n        FROM anime_anime_ordered \n        WHERE (animeA_rank <= 100 OR animeB_rank <= 100)\n        AND animeA < animeB \n        AND ABS(MOD(FARM_FINGERPRINT(CONCAT(animeA, animeB)), 10)) = 8\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "validation data : anime anime retrieval"
            }
          },
          "load-big-query-data-3": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-3"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    anime_anime_ordered AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank,\n            ROW_NUMBER() OVER (PARTITION BY animeB ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeA_rank\n        FROM anime_anime\n    )\n    \n        SELECT animeA, animeB \n        FROM anime_anime_ordered \n        WHERE (animeA_rank <= 100 OR animeB_rank <= 100) \n        AND animeA < animeB \n        AND ABS(MOD(FARM_FINGERPRINT(CONCAT(animeA, animeB)), 10)) = 9\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "test data : anime anime retrieval"
            }
          },
          "load-big-query-data-4": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-4"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n        SELECT DISTINCT(anime_id) FROM `anime-rec-dev.processed_area.user_anime`\n    "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "all anime data"
            }
          },
          "load-big-query-data-5": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-5"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n        WITH user_anime_watch AS (\n            SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date DESC) AS user_anime_order\n            FROM `anime-rec-dev.processed_area.user_anime`\n            WHERE status = 'completed' \n            AND last_interaction_date IS NOT NULL\n            AND (score IS NULL OR score > 5)\n        )\n        SELECT user_id, anime_id FROM user_anime_watch WHERE user_anime_order = 1\n    "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "last watched anime data"
            }
          },
          "load-big-query-data-6": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-6"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    ordered_anime_anime AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank\n        FROM anime_anime\n    ),\n    positive_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 1 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank + 10 < B.animeB_rank\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    negative_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 0 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank > B.animeB_rank + 10\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    all_pairs AS (\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM positive_pairs\n        UNION DISTINCT\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM negative_pairs\n    )\n    \n        SELECT *\n        FROM all_pairs \n        WHERE ABS(MOD(FARM_FINGERPRINT(CONCAT(anchor_anime, rel_anime_1)), 10)) BETWEEN 0 AND 7\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "train data : anime anime pair ranking"
            }
          },
          "load-big-query-data-7": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-7"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    ordered_anime_anime AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank\n        FROM anime_anime\n    ),\n    positive_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 1 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank + 10 < B.animeB_rank\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    negative_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 0 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank > B.animeB_rank + 10\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    all_pairs AS (\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM positive_pairs\n        UNION DISTINCT\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM negative_pairs\n    )\n    \n        SELECT *\n        FROM all_pairs \n        WHERE ABS(MOD(FARM_FINGERPRINT(CONCAT(anchor_anime, rel_anime_1)), 10)) = 8\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "validation data : anime anime pair ranking"
            }
          },
          "load-big-query-data-8": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-data-8"
            },
            "inputs": {
              "parameters": {
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n    WITH \n    user_anime AS (\n        SELECT user_id, anime_id, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY last_interaction_date ASC) AS user_anime_order\n        FROM `anime-rec-dev.processed_area.user_anime`\n        WHERE status = 'completed' AND last_interaction_date IS NOT NULL\n    ),\n    anime_co_watch_anime AS (\n        SELECT A.anime_id AS animeA, B.anime_id AS animeB, COUNT(*) AS co_occurence_cnt\n        FROM user_anime A \n        LEFT JOIN user_anime B\n        ON A.user_id = B.user_id \n        WHERE (ABS(A.user_anime_order - B.user_anime_order) BETWEEN 1 AND 10)\n        GROUP BY A.anime_id, B.anime_id\n        HAVING co_occurence_cnt >= 10\n    ),\n    anime_related_anime AS (\n        SELECT animeA, animeB, related\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE related = 1\n    ),\n    anime_recommended_anime AS (\n        SELECT animeA, animeB, num_recommenders\n        FROM `anime-rec-dev.processed_area.anime_anime` \n        WHERE recommendation = 1 AND num_recommenders >= 5\n    ),\n    anime_anime AS (\n        SELECT  A.animeA AS animeA, \n                A.animeB AS animeB, \n                COALESCE(A.co_occurence_cnt, 0) AS co_occurence_cnt, \n                COALESCE(B.related, 0) AS related, \n                COALESCE(C.num_recommenders, 0) AS num_recommenders\n        FROM anime_co_watch_anime A\n        FULL OUTER JOIN anime_related_anime B\n        ON A.animeA = B.animeA AND A.animeB = B.animeB\n        FULL OUTER JOIN anime_recommended_anime C\n        ON A.animeA = C.animeA AND A.animeB = C.animeB\n    ),\n    ordered_anime_anime AS (\n        SELECT *,\n            ROW_NUMBER() OVER (PARTITION BY animeA ORDER BY related DESC, num_recommenders DESC, co_occurence_cnt DESC) AS animeB_rank\n        FROM anime_anime\n    ),\n    positive_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 1 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank + 10 < B.animeB_rank\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    negative_pairs AS (\n        SELECT A.animeA AS anchor_anime, A.animeB AS rel_anime_1, B.animeB AS rel_anime_2, 0 AS label\n        FROM ordered_anime_anime A\n        LEFT JOIN ordered_anime_anime B\n        ON A.animeA = B.animeA AND A.animeB_rank > B.animeB_rank + 10\n        WHERE A.animeB_rank <= 100 AND B.animeB_rank <= 100\n    ),\n    all_pairs AS (\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM positive_pairs\n        UNION DISTINCT\n        SELECT anchor_anime, rel_anime_1, rel_anime_2, label FROM negative_pairs\n    )\n    \n        SELECT *\n        FROM all_pairs \n        WHERE ABS(MOD(FARM_FINGERPRINT(CONCAT(anchor_anime, rel_anime_1)), 10)) = 9\n        "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "test data : anime anime pair ranking"
            }
          },
          "load-big-query-external-data": {
            "cachingOptions": {
              "enableCache": true
            },
            "componentRef": {
              "name": "comp-load-big-query-external-data"
            },
            "dependentTasks": [
              "component-2"
            ],
            "inputs": {
              "artifacts": {
                "external_table_uri": {
                  "taskOutputArtifact": {
                    "outputArtifactKey": "output_data_path",
                    "producerTask": "component-2"
                  }
                }
              },
              "parameters": {
                "external_table_id": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "unknown_retrieved"
                    }
                  }
                },
                "external_table_schema": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "[[\"user_id\", \"STRING\"], [\"anime_id\", \"STRING\"], [\"retrieved_anime_id\", \"STRING\"]]"
                    }
                  }
                },
                "query": {
                  "runtimeValue": {
                    "constantValue": {
                      "stringValue": "\n        SELECT A.user_id, A.anime_id, A.retrieved_anime_id\n        FROM unknown_retrieved A\n        LEFT JOIN `anime-rec-dev.processed_area.user_anime` B\n        ON A.user_id = B.user_id AND A.retrieved_anime_id = B.anime_id\n        WHERE B.status IS NULL\n    "
                    }
                  }
                }
              }
            },
            "taskInfo": {
              "name": "remove known retrieved animes"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "component-3-output_metric_path": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          },
          "component-output_metric_path": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "schemaVersion": "2.0.0",
    "sdkVersion": "kfp-1.8.10"
  },
  "runtimeConfig": {}
}